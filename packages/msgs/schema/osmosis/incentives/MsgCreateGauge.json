{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/MsgCreateGauge",
    "definitions": {
        "MsgCreateGauge": {
            "properties": {
                "is_perpetual": {
                    "type": "boolean",
                    "description": "is_perpetual shows if it's a perpetual or non-perpetual gauge Non-perpetual gauges distribute their tokens equally per epoch while the gauge is in the active period. Perpetual gauges distribute all their tokens at a single time and only distribute their tokens again once the gauge is refilled"
                },
                "owner": {
                    "type": "string",
                    "description": "owner is the address of gauge creator"
                },
                "distribute_to": {
                    "$ref": "#/definitions/osmosis.lockup.QueryCondition",
                    "additionalProperties": true,
                    "description": "distribute_to show which lock the gauge should distribute to by time duration or by timestamp"
                },
                "coins": {
                    "items": {
                        "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
                    },
                    "type": "array",
                    "description": "coins are coin(s) to be distributed by the gauge"
                },
                "start_time": {
                    "type": "string",
                    "description": "start_time is the distribution start time",
                    "format": "date-time"
                },
                "num_epochs_paid_over": {
                    "type": "string",
                    "description": "num_epochs_paid_over is the number of epochs distribution will be completed over"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Msg Create Gauge",
            "description": "MsgCreateGauge creates a gague to distribute rewards to users"
        },
        "cosmos.base.v1beta1.Coin": {
            "properties": {
                "denom": {
                    "type": "string"
                },
                "amount": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Coin",
            "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "osmosis.lockup.QueryCondition": {
            "properties": {
                "lock_query_type": {
                    "enum": [
                        "ByDuration",
                        0,
                        "ByTime",
                        1
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Lock Query Type",
                    "description": "LockQueryType defines the type of the lock query that can either be by duration or start time of the lock."
                },
                "denom": {
                    "type": "string",
                    "description": "Denom represents the token denomination we are looking to lock up"
                },
                "duration": {
                    "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
                    "type": "string",
                    "description": "Duration is used to query locks with longer duration than the specified duration. Duration field must not be nil when the lock query type is `ByLockDuration`.",
                    "format": "regex"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Timestamp is used by locks started before the specified duration. Timestamp field must not be nil when the lock query type is `ByLockTime`. Querying locks with timestamp is currently not implemented.",
                    "format": "date-time"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Query Condition",
            "description": "QueryCondition is a struct used for querying locks upon different conditions. Duration field and timestamp fields could be optional, depending on the LockQueryType."
        }
    }
}