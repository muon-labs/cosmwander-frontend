(this["webpackJsonpcosmwander-landing"]=this["webpackJsonpcosmwander-landing"]||[]).push([[0],{36:function(e,n,t){},55:function(e,n,t){"use strict";t.r(n);var i={};t.r(i),t.d(i,"MeshLine",(function(){return f})),t.d(i,"MeshLineMaterial",(function(){return b})),t.d(i,"MeshLineRaycast",(function(){return p}));var r=t(37),o=t.n(r),s=t(8),a=t(0),c=t(12),u=t(1),l=t(2),v=t(9),x=t(3),h=t(4);function p(e,n){var t=new a.Matrix4,i=new a.Ray,r=new a.Sphere,o=new a.Vector3,s=this.geometry;if(r.copy(s.boundingSphere),r.applyMatrix4(this.matrixWorld),!1!==e.ray.intersectSphere(r,o)){t.getInverse(this.matrixWorld),i.copy(e.ray).applyMatrix4(t);var c=new a.Vector3,u=new a.Vector3,l=new a.Vector3,v=this instanceof a.LineSegments?2:1,x=s.index,h=s.attributes;if(null!==x)for(var p=x.array,d=h.position.array,f=h.width.array,m=0,y=p.length-1;m<y;m+=v){var b=p[m],C=p[m+1];c.fromArray(d,3*b),u.fromArray(d,3*C);var g=void 0!=f[Math.floor(m/3)]?f[Math.floor(m/3)]:1,_=e.params.Line.threshold+this.material.lineWidth*g/2,j=_*_;if(!(i.distanceSqToSegment(c,u,o,l)>j)){o.applyMatrix4(this.matrixWorld);var w=e.ray.origin.distanceTo(o);w<e.near||w>e.far||(n.push({distance:w,point:l.clone().applyMatrix4(this.matrixWorld),index:m,face:null,faceIndex:null,object:this}),m=y)}}}}function d(e,n,t,i,r){var o;if(e=e.subarray||e.slice?e:e.buffer,t=t.subarray||t.slice?t:t.buffer,e=n?e.subarray?e.subarray(n,r&&n+r):e.slice(n,r&&n+r):e,t.set)t.set(e,i);else for(o=0;o<e.length;o++)t[o+i]=e[o];return t}var f=function(e){Object(x.a)(t,e);var n=Object(h.a)(t);function t(){var e;return Object(u.a)(this,t),(e=n.call(this)).type="MeshLine",e.isMeshLine=!0,e.positions=[],e.raycast=p,e.previous=[],e.next=[],e.side=[],e.width=[],e.indices_array=[],e.uvs=[],e.counters=[],e._points=[],e._geom=null,e.widthCallback=null,e.matrixWorld=new a.Matrix4,Object.defineProperties(Object(v.a)(e),{geometry:{enumerable:!0,get:function(){return this}},geom:{enumerable:!0,get:function(){return this._geom},set:function(e){this.setGeometry(e,this.widthCallback)}},points:{enumerable:!0,get:function(){return this._points},set:function(e){this.setPoints(e,this.widthCallback)}}}),e}return Object(l.a)(t,[{key:"setMatrixWorld",value:function(e){this.matrixWorld=e}},{key:"setGeometry",value:function(e,n){this._geometry=e,e instanceof a.BufferGeometry?this.setPoints(e.getAttribute("position").array,n):this.setPoints(e,n)}},{key:"setPoints",value:function(e,n){if(e instanceof Float32Array||e instanceof Array){if(this._points=e,this.widthCallback=n,this.positions=[],this.counters=[],e.length&&e[0]instanceof a.Vector3)for(var t=0;t<e.length;t++){var i=e[t],r=t/e.length;this.positions.push(i.x,i.y,i.z),this.positions.push(i.x,i.y,i.z),this.counters.push(r),this.counters.push(r)}else for(t=0;t<e.length;t+=3){r=t/e.length;this.positions.push(e[t],e[t+1],e[t+2]),this.positions.push(e[t],e[t+1],e[t+2]),this.counters.push(r),this.counters.push(r)}this.process()}else console.error("ERROR: The BufferArray of points is not instancied correctly.")}},{key:"compareV3",value:function(e,n){var t=6*e,i=6*n;return this.positions[t]===this.positions[i]&&this.positions[t+1]===this.positions[i+1]&&this.positions[t+2]===this.positions[i+2]}},{key:"copyV3",value:function(e){var n=6*e;return[this.positions[n],this.positions[n+1],this.positions[n+2]]}},{key:"process",value:function(){var e,n,t=this.positions.length/6;this.previous=[],this.next=[],this.side=[],this.width=[],this.indices_array=[],this.uvs=[],n=this.compareV3(0,t-1)?this.copyV3(t-2):this.copyV3(0),this.previous.push(n[0],n[1],n[2]),this.previous.push(n[0],n[1],n[2]);for(var i=0;i<t;i++){if(this.side.push(1),this.side.push(-1),e=this.widthCallback?this.widthCallback(i/(t-1)):1,this.width.push(e),this.width.push(e),this.uvs.push(i/(t-1),0),this.uvs.push(i/(t-1),1),i<t-1){n=this.copyV3(i),this.previous.push(n[0],n[1],n[2]),this.previous.push(n[0],n[1],n[2]);var r=2*i;this.indices_array.push(r,r+1,r+2),this.indices_array.push(r+2,r+1,r+3)}i>0&&(n=this.copyV3(i),this.next.push(n[0],n[1],n[2]),this.next.push(n[0],n[1],n[2]))}n=this.compareV3(t-1,0)?this.copyV3(1):this.copyV3(t-1),this.next.push(n[0],n[1],n[2]),this.next.push(n[0],n[1],n[2]),this._attributes&&this._attributes.position.count===this.positions.length?(this._attributes.position.copyArray(new Float32Array(this.positions)),this._attributes.position.needsUpdate=!0,this._attributes.previous.copyArray(new Float32Array(this.previous)),this._attributes.previous.needsUpdate=!0,this._attributes.next.copyArray(new Float32Array(this.next)),this._attributes.next.needsUpdate=!0,this._attributes.side.copyArray(new Float32Array(this.side)),this._attributes.side.needsUpdate=!0,this._attributes.width.copyArray(new Float32Array(this.width)),this._attributes.width.needsUpdate=!0,this._attributes.uv.copyArray(new Float32Array(this.uvs)),this._attributes.uv.needsUpdate=!0,this._attributes.index.copyArray(new Uint16Array(this.indices_array)),this._attributes.index.needsUpdate=!0):this._attributes={position:new a.BufferAttribute(new Float32Array(this.positions),3),previous:new a.BufferAttribute(new Float32Array(this.previous),3),next:new a.BufferAttribute(new Float32Array(this.next),3),side:new a.BufferAttribute(new Float32Array(this.side),1),width:new a.BufferAttribute(new Float32Array(this.width),1),uv:new a.BufferAttribute(new Float32Array(this.uvs),2),index:new a.BufferAttribute(new Uint16Array(this.indices_array),1),counters:new a.BufferAttribute(new Float32Array(this.counters),1)},this.setAttribute("position",this._attributes.position),this.setAttribute("previous",this._attributes.previous),this.setAttribute("next",this._attributes.next),this.setAttribute("side",this._attributes.side),this.setAttribute("width",this._attributes.width),this.setAttribute("uv",this._attributes.uv),this.setAttribute("counters",this._attributes.counters),this.setIndex(this._attributes.index),this.computeBoundingSphere(),this.computeBoundingBox()}},{key:"advance",value:function(e){var n=e.x,t=e.y,i=e.z,r=this._attributes.position.array,o=this._attributes.previous.array,s=this._attributes.next.array,a=r.length;d(r,0,o,0,a),d(r,6,r,0,a-6),r[a-6]=n,r[a-5]=t,r[a-4]=i,r[a-3]=n,r[a-2]=t,r[a-1]=i,d(r,6,s,0,a-6),s[a-6]=n,s[a-5]=t,s[a-4]=i,s[a-3]=n,s[a-2]=t,s[a-1]=i,this._attributes.position.needsUpdate=!0,this._attributes.previous.needsUpdate=!0,this._attributes.next.needsUpdate=!0}}]),t}(a.BufferGeometry),m=t(6),y=t(5);a.ShaderChunk.meshline_vert=["","#include <common>","",a.ShaderChunk.logdepthbuf_pars_vertex,a.ShaderChunk.fog_pars_vertex,"","attribute vec3 previous;","attribute vec3 next;","attribute float side;","attribute float width;","attribute float counters;","","uniform vec2 resolution;","uniform float lineWidth;","uniform vec3 color;","uniform float opacity;","uniform float sizeAttenuation;","","varying vec2 vUV;","varying vec4 vColor;","varying float vCounters;","","vec2 fix( vec4 i, float aspect ) {","","    vec2 res = i.xy / i.w;","    res.x *= aspect;","\t vCounters = counters;","    return res;","","}","","void main() {","","    float aspect = resolution.x / resolution.y;","","    vColor = vec4( color, opacity );","    vUV = uv;","","    mat4 m = projectionMatrix * modelViewMatrix;","    vec4 finalPosition = m * vec4( position, 1.0 );","    vec4 prevPos = m * vec4( previous, 1.0 );","    vec4 nextPos = m * vec4( next, 1.0 );","","    vec2 currentP = fix( finalPosition, aspect );","    vec2 prevP = fix( prevPos, aspect );","    vec2 nextP = fix( nextPos, aspect );","","    float w = lineWidth * width;","","    vec2 dir;","    if( nextP == currentP ) dir = normalize( currentP - prevP );","    else if( prevP == currentP ) dir = normalize( nextP - currentP );","    else {","        vec2 dir1 = normalize( currentP - prevP );","        vec2 dir2 = normalize( nextP - currentP );","        dir = normalize( dir1 + dir2 );","","        vec2 perp = vec2( -dir1.y, dir1.x );","        vec2 miter = vec2( -dir.y, dir.x );","        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );","","    }","","    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;","    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );","    normal.xy *= .5 * w;","    normal *= projectionMatrix;","    if( sizeAttenuation == 0. ) {","        normal.xy *= finalPosition.w;","        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;","    }","","    finalPosition.xy += normal.xy * side;","","    gl_Position = finalPosition;","",a.ShaderChunk.logdepthbuf_vertex,a.ShaderChunk.fog_vertex&&"    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",a.ShaderChunk.fog_vertex,"}"].join("\n"),a.ShaderChunk.meshline_frag=["",a.ShaderChunk.fog_pars_fragment,a.ShaderChunk.logdepthbuf_pars_fragment,"","uniform sampler2D map;","uniform sampler2D alphaMap;","uniform float useMap;","uniform float useAlphaMap;","uniform float useDash;","uniform float dashArray;","uniform float dashOffset;","uniform float dashRatio;","uniform float visibility;","uniform float alphaTest;","uniform vec2 repeat;","","varying vec2 vUV;","varying vec4 vColor;","varying float vCounters;","","void main() {","",a.ShaderChunk.logdepthbuf_fragment,"","    vec4 c = vColor;","    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );","    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;","    if( c.a < alphaTest ) discard;","    if( useDash == 1. ){","        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));","    }","    gl_FragColor = c;","    gl_FragColor.a *= step(vCounters, visibility);","",a.ShaderChunk.fog_fragment,"}"].join("\n");var b=function(e){Object(x.a)(t,e);var n=Object(h.a)(t);function t(e){var i;return Object(u.a)(this,t),(i=n.call(this,{uniforms:Object.assign({},a.UniformsLib.fog,{lineWidth:{value:1},map:{value:null},useMap:{value:0},alphaMap:{value:null},useAlphaMap:{value:0},color:{value:new a.Color(16777215)},opacity:{value:1},resolution:{value:new a.Vector2(1,1)},sizeAttenuation:{value:1},dashArray:{value:0},dashOffset:{value:0},dashRatio:{value:.5},useDash:{value:0},visibility:{value:1},alphaTest:{value:0},repeat:{value:new a.Vector2(1,1)}}),vertexShader:a.ShaderChunk.meshline_vert,fragmentShader:a.ShaderChunk.meshline_frag})).type="MeshLineMaterial",Object.defineProperties(Object(v.a)(i),{lineWidth:{enumerable:!0,get:function(){return this.uniforms.lineWidth.value},set:function(e){this.uniforms.lineWidth.value=e}},map:{enumerable:!0,get:function(){return this.uniforms.map.value},set:function(e){this.uniforms.map.value=e}},useMap:{enumerable:!0,get:function(){return this.uniforms.useMap.value},set:function(e){this.uniforms.useMap.value=e}},alphaMap:{enumerable:!0,get:function(){return this.uniforms.alphaMap.value},set:function(e){this.uniforms.alphaMap.value=e}},useAlphaMap:{enumerable:!0,get:function(){return this.uniforms.useAlphaMap.value},set:function(e){this.uniforms.useAlphaMap.value=e}},color:{enumerable:!0,get:function(){return this.uniforms.color.value},set:function(e){this.uniforms.color.value=e}},opacity:{enumerable:!0,get:function(){return this.uniforms.opacity.value},set:function(e){this.uniforms.opacity.value=e}},resolution:{enumerable:!0,get:function(){return this.uniforms.resolution.value},set:function(e){this.uniforms.resolution.value.copy(e)}},sizeAttenuation:{enumerable:!0,get:function(){return this.uniforms.sizeAttenuation.value},set:function(e){this.uniforms.sizeAttenuation.value=e}},dashArray:{enumerable:!0,get:function(){return this.uniforms.dashArray.value},set:function(e){this.uniforms.dashArray.value=e,this.useDash=0!==e?1:0}},dashOffset:{enumerable:!0,get:function(){return this.uniforms.dashOffset.value},set:function(e){this.uniforms.dashOffset.value=e}},dashRatio:{enumerable:!0,get:function(){return this.uniforms.dashRatio.value},set:function(e){this.uniforms.dashRatio.value=e}},useDash:{enumerable:!0,get:function(){return this.uniforms.useDash.value},set:function(e){this.uniforms.useDash.value=e}},visibility:{enumerable:!0,get:function(){return this.uniforms.visibility.value},set:function(e){this.uniforms.visibility.value=e}},alphaTest:{enumerable:!0,get:function(){return this.uniforms.alphaTest.value},set:function(e){this.uniforms.alphaTest.value=e}},repeat:{enumerable:!0,get:function(){return this.uniforms.repeat.value},set:function(e){this.uniforms.repeat.value.copy(e)}}}),i.setValues(e),i}return Object(l.a)(t,[{key:"copy",value:function(e){return Object(m.a)(Object(y.a)(t.prototype),"copy",this).call(this,e),this.lineWidth=e.lineWidth,this.map=e.map,this.useMap=e.useMap,this.alphaMap=e.alphaMap,this.useAlphaMap=e.useAlphaMap,this.color.copy(e.color),this.opacity=e.opacity,this.resolution.copy(e.resolution),this.sizeAttenuation=e.sizeAttenuation,this.dashArray.copy(e.dashArray),this.dashOffset.copy(e.dashOffset),this.dashRatio.copy(e.dashRatio),this.useDash=e.useDash,this.visibility=e.visibility,this.alphaTest=e.alphaTest,this.repeat.copy(e.repeat),this}}]),t}(a.ShaderMaterial),C=t(41),g=t(26),_=t(38),j=t(42),w=t(7);function z(){var e=Object(s.useRef)(),n=Object(s.useRef)(),t=Object(c.e)(),i=t.scene,r=t.gl,o=t.size,u=t.camera,l=Object(s.useMemo)((function(){return new a.Vector2(512,512)}),[]);return Object(s.useEffect)((function(){e.current.setSize(o.width,o.height)}),[o]),Object(c.c)((function(){e.current.render()}),1),Object(w.jsxs)("effectComposer",{ref:e,args:[r],children:[Object(w.jsx)("renderPass",{attachArray:"passes",scene:i,camera:u}),Object(w.jsx)("unrealBloomPass",{ref:n,attachArray:"passes",args:[l,2,1,0]})]})}Object(c.b)({EffectComposer:C.a,ShaderPass:g.a,RenderPass:_.a,UnrealBloomPass:j.a});var O=t(57),M=t(58),A=t(11),P=t(23),S=t.n(P),V=t(19),L=function(){return S.a.range(.2,1)};function D(e){var n=e.curve,t=e.width,i=e.color,r=e.speed,o=Object(s.useRef)();return Object(c.c)((function(){o.current.uniforms.dashOffset.value-=r})),Object(w.jsxs)("mesh",{children:[Object(w.jsx)("meshLine",{attach:"geometry",points:n}),Object(w.jsx)("meshLineMaterial",{attach:"material",ref:o,transparent:!0,depthTest:!1,lineWidth:t,color:i,dashArray:.1,dashRatio:.95})]})}function k(e){var n=e.mouse,t=e.count,i=e.colors,r=e.radius,o=void 0===r?10:r,u=Object(s.useMemo)((function(){return new Array(t).fill().map((function(e,n){var t=new a.Vector3(Math.sin(0)*o*L(),Math.cos(0)*o*L(),0),r=new Array(30).fill().map((function(e,n){var i=n/20*Math.PI*2;return t.add(new a.Vector3(Math.sin(i)*o*L(),Math.cos(i)*o*L(),0)).clone()})),s=new a.CatmullRomCurve3(r).getPoints(1e3);return{color:i[parseInt(i.length*Math.random())],width:Math.max(.1,.2*n/10),speed:Math.max(.001,.004*Math.random()),curve:s}}))}),[t]),l=Object(s.useRef)(),v=Object(c.e)(),x=v.size,h=v.viewport,p=x.width/h.width;return Object(c.c)((function(){l.current&&(l.current.rotation.x=Object(V.lerp)(l.current.rotation.x,0+n.current[1]/p/200,.1),l.current.rotation.y=Object(V.lerp)(l.current.rotation.y,0+n.current[0]/p/400,.1))})),Object(w.jsx)("group",{ref:l,children:Object(w.jsx)("group",{position:[2*-o,-o,-10],scale:[1,1.3,1],children:u.map((function(e,n){return Object(w.jsx)(D,Object(A.a)({},e),n)}))})})}t(36);function F(e){var n=e.count,t=e.mouse,i=Object(s.useRef)(),r=Object(s.useRef)(),o=Object(c.e)(),u=o.size,l=o.viewport,v=u.width/l.width,x=Object(s.useMemo)((function(){return new a.Object3D}),[]),h=Object(s.useMemo)((function(){for(var e=[],t=0;t<n;t++){var i=100*Math.random(),r=20+100*Math.random(),o=.01+Math.random()/200,s=100*Math.random()-50,a=100*Math.random()-50,c=100*Math.random()-50;e.push({t:i,factor:r,speed:o,xFactor:s,yFactor:a,zFactor:c,mx:0,my:0})}return e}),[n]);return Object(c.c)((function(e){r.current.position.set(t.current[0]/v,-t.current[1]/v,0),h.forEach((function(e,n){var r=e.t,o=e.factor,s=e.speed,a=e.xFactor,c=e.yFactor,u=e.zFactor;r=e.t+=s/2;var l=Math.cos(r)+Math.sin(1*r)/10,v=Math.sin(r)+Math.cos(2*r)/10,h=Math.cos(r);e.mx+=.01*(t.current[0]-e.mx),e.my+=.01*(-1*t.current[1]-e.my),x.position.set(e.mx/10*l+a+Math.cos(r/10*o)+Math.sin(1*r)*o/10,e.my/10*v+c+Math.sin(r/10*o)+Math.cos(2*r)*o/10,e.my/10*v+u+Math.cos(r/10*o)+Math.sin(3*r)*o/10),x.scale.set(h,h,h),x.rotation.set(5*h,5*h,5*h),x.updateMatrix(),i.current.setMatrixAt(n,x.matrix)})),i.current.instanceMatrix.needsUpdate=!0})),Object(w.jsxs)(w.Fragment,{children:[Object(w.jsx)("pointLight",{ref:r,distance:40,intensity:8,color:"lightblue"}),Object(w.jsxs)("instancedMesh",{ref:i,args:[null,null,n],children:[Object(w.jsx)("dodecahedronBufferGeometry",{args:[.2,0]}),Object(w.jsx)("meshPhongMaterial",{color:"#050505"})]})]})}var I=function(e){Object(x.a)(t,e);var n=Object(h.a)(t);function t(e){return Object(u.a)(this,t),n.call(this,{clipping:!0,uniforms:{u_time:{value:0},u_music:{value:0},u_resolution:{value:[800,800]},u_scale:{value:1},u_background:{value:new a.Color("#AF66E8")},u_foreground:{value:new a.Color("#de77c7")},u_distort:{value:.8},u_radius:{value:1}},vertexShader:"\n        precision highp float;\n        varying vec2 vUv;\n        varying vec3 vPosition;\n        varying float vOutput;\n\n        uniform float u_music;\n        uniform float u_time;\n        uniform float u_scale;\n        uniform vec3 u_background;\n        uniform float u_distort;\n        uniform float u_radius;\n\n        //\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289_2386359883(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289_2386359883(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute_2386359883(vec4 x) {\n     return mod289_2386359883(((x*34.0)+1.0)*x);\n}\n\nfloat permute_2386359883(float x) {\n     return mod289_2386359883(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_2386359883(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt_2386359883(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4_2386359883(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat noise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289_2386359883(i);\n  float j0 = permute_2386359883( permute_2386359883( permute_2386359883( permute_2386359883(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute_2386359883( permute_2386359883( permute_2386359883( permute_2386359883 (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0_2386359883 = grad4_2386359883(j0,   ip);\n  vec4 p1 = grad4_2386359883(j1.x, ip);\n  vec4 p2 = grad4_2386359883(j1.y, ip);\n  vec4 p3 = grad4_2386359883(j1.z, ip);\n  vec4 p4 = grad4_2386359883(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt_2386359883(vec4(dot(p0_2386359883,p0_2386359883), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_2386359883 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt_2386359883(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0_2386359883, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n\n        //\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_287634254(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_287634254(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_287634254(vec4 x) {\n     return mod289_287634254(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_287634254(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise3(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_287634254 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_287634254 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_287634254;\n  vec3 i1 = min( g_287634254.xyz, l.zxy );\n  vec3 i2 = max( g_287634254.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_287634254.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_287634254(i);\n  vec4 p = permute_287634254( permute_287634254( permute_287634254(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_287634254.wyz - D_287634254.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_287634254 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_287634254 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_287634254.xy,h.z);\n  vec3 p3 = vec3(a1_287634254.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_287634254(vec4(dot(p0_287634254,p0_287634254), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_287634254 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_287634254,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n        const int AMOUNT = 4;\n\n        float loopNoise (vec3 v, float t, float scale, float offset) {\n          float duration = scale;\n          float current = t * scale;\n          return ((duration - current) * noise(vec4(v, current + offset)) + current * noise(vec4(v, current - duration + offset))) / duration;\n        }\n\n        void main () {\n          vPosition = position;\n\n          vec2 coord = 20.0 * vUv;\n\n          vec3 p = vPosition * 1.0;\n          float v = 0.0;\n          float amp = 0.5;\n          v += loopNoise(p, u_music, 1.0, 60.0) * amp;\n\n          float len;\n\n          for (int i = 0; i < AMOUNT; i++) {\n            len = length(vec2(coord.x, coord.y));\n            coord.x = coord.x - cos(coord.y + sin(len)) + cos(u_music / 9.0);\n            coord.y = coord.y + sin(coord.x + cos(len)) + sin(u_music / 12.0);\n          }\n\n          len += v * u_scale;\n          vec3 displacement = vec3(1.0 + cos(len), 1.0 + cos(len), 1.0 + cos(len));\n\n          vOutput = len;\n          vec3 newPosition = position + normal * displacement * 0.1;\n\n          // distortion\n          float updateTime = u_time / 50.0;\n          float noise = snoise3(vec3(newPosition / 2.0 + updateTime * 5.0));\n          vec3 transformed = vec3(newPosition * (noise * pow(u_distort, 2.0) + u_radius));\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(transformed, 1.0);\n\n          vUv = position.xy * 0.5 + 0.5;\n        }",fragmentShader:'\n        precision highp float;\n\n        //\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289_911425545(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat mod289_911425545(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nvec4 permute_911425545(vec4 x) {\n     return mod289_911425545(((x*34.0)+1.0)*x);\n}\n\nfloat permute_911425545(float x) {\n     return mod289_911425545(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_911425545(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt_911425545(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4_911425545(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n// (sqrt(5) - 1)/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat noise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = mod289_911425545(i);\n  float j0 = permute_911425545( permute_911425545( permute_911425545( permute_911425545(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute_911425545( permute_911425545( permute_911425545( permute_911425545 (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0_911425545 = grad4_911425545(j0,   ip);\n  vec4 p1 = grad4_911425545(j1.x, ip);\n  vec4 p2 = grad4_911425545(j1.y, ip);\n  vec4 p3 = grad4_911425545(j1.z, ip);\n  vec4 p4 = grad4_911425545(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt_911425545(vec4(dot(p0_911425545,p0_911425545), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_911425545 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt_911425545(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0_911425545, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n\n        //\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_1647042425(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_1647042425(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_1647042425(vec4 x)\n{\n  return mod289_1647042425(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1647042425(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade_1647042425(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise_1647042425(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289_1647042425(Pi0);\n  Pi1 = mod289_1647042425(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute_1647042425(permute_1647042425(ix) + iy);\n  vec4 ixy0 = permute_1647042425(ixy + iz0);\n  vec4 ixy1 = permute_1647042425(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt_1647042425(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt_1647042425(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade_1647042425(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_3247691527(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_3247691527(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_3247691527(vec4 x) {\n     return mod289_3247691527(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_3247691527(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise_3247691527(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D_3247691527 = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g_3247691527 = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g_3247691527;\n  vec3 i1 = min( g_3247691527.xyz, l.zxy );\n  vec3 i2 = max( g_3247691527.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D_3247691527.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289_3247691527(i);\n  vec4 p = permute_3247691527( permute_3247691527( permute_3247691527(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D_3247691527.wyz - D_3247691527.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1_3247691527 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0_3247691527 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1_3247691527.xy,h.z);\n  vec3 p3 = vec3(a1_3247691527.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt_3247691527(vec4(dot(p0_3247691527,p0_3247691527), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_3247691527 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0_3247691527,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat grain(vec2 texCoord, vec2 resolution, float frame, float multiplier) {\n    vec2 mult = texCoord * resolution;\n    float offset = snoise_3247691527(vec3(mult / multiplier, frame));\n    float n1 = pnoise_1647042425(vec3(mult, offset), vec3(1.0/texCoord * resolution, 1.0));\n    return n1 / 2.0 + 0.5;\n}\n\nfloat grain(vec2 texCoord, vec2 resolution, float frame) {\n    return grain(texCoord, resolution, frame, 2.5);\n}\n\nfloat grain(vec2 texCoord, vec2 resolution) {\n    return grain(texCoord, resolution, 0.0);\n}\n\n        vec3 blend(vec3 base, vec3 blend) {\n    return mix(\n        sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend), \n        2.0 * base * blend + base * base * (1.0 - 2.0 * blend), \n        step(base, vec3(0.5))\n    );\n}\n\n// Using conditionals\n// vec3 blendSoftLight(vec3 base, vec3 blend) {\n//     return vec3(\n//         ((blend.r < 0.5) ? (2.0 * base.r * blend.r + base.r * base.r * (1.0 - 2.0 * blend.r)) : (sqrt(base.r) * (2.0 * blend.r - 1.0) + 2.0 * base.r * (1.0 - blend.r))),\n//         ((blend.g < 0.5) ? (2.0 * base.g * blend.g + base.g * base.g * (1.0 - 2.0 * blend.g)) : (sqrt(base.g) * (2.0 * blend.g - 1.0) + 2.0 * base.g * (1.0 - blend.g))),\n//         ((blend.b < 0.5) ? (2.0 * base.b * blend.b + base.b * base.b * (1.0 - 2.0 * blend.b)) : (sqrt(base.b) * (2.0 * blend.b - 1.0) + 2.0 * base.b * (1.0 - blend.b)))\n//     );\n// }\n\n        uniform vec2 u_resolution;\n        uniform float u_music;\n        uniform float u_scale;\n        uniform vec3 u_background;\n        uniform vec3 u_foreground;\n\n        varying vec3 vPosition;\n        varying vec2 vUv;\n        varying float vOutput;\n\n        const int AMOUNT = 4;\n\n        float loopNoise (vec3 v, float t, float scale, float offset) {\n          float duration = scale;\n          float current = t * scale;\n          return ((duration - current) * noise(vec4(v, current + offset)) + current * noise(vec4(v, current - duration + offset))) / duration;\n        }\n\n        void main(){\n          vec2 coord = 20.0 * vUv;\n\n          vec3 p = vPosition * 1.0;\n          float v = 0.0;\n          float amp = 0.5;\n          v = loopNoise(p, u_music, 1.0, 60.0) * amp;\n\n          float len;\n\n          for (int i = 0; i < AMOUNT; i++){\n            len = length(vec2(coord.x, coord.y));\n            coord.x = coord.x - cos(coord.y + sin(len)) + cos(u_music / 9.0);\n            coord.y = coord.y + sin(coord.x + cos(len)) + sin(u_music / 12.0);\n          }\n\n          len += v * u_scale;\n          vec3 color = mix(u_background,  vec3(0.25, 0.25, 0.25), cos(vOutput));\n\n          gl_FragColor = vec4(color, 1.0);\n        }\n      '})}return t}(a.ShaderMaterial);function T(e){e.distortionScale;var n=Object(s.useRef)(),t=Object(c.e)().size;return Object(c.c)((function(e){if(n.current){n.current.material.uniforms.u_resolution.value=[t.width,t.height],n.current.material.uniforms.u_time.value=e.clock.elapsedTime,n.current.material.uniforms.u_distort.value=0;var i=S.a.noise1D(e.clock.elapsedTime,.25),r=Object(V.mapRange)(i,-1,1,0,1);n.current.rotation.x=Object(V.lerp)(.1,.8,r),n.current.rotation.y=Object(V.lerp)(.4,1.2,r),n.current.rotation.z=Object(V.lerp)(.8,1.6,r)}})),Object(w.jsxs)("mesh",{ref:n,scale:[10,10,10],children:[Object(w.jsx)("icosahedronBufferGeometry",{args:[1,60]}),Object(w.jsx)("silkyMaterial",{})]})}Object(c.b)({SilkyMaterial:I});var Z=t(14),R=t(56);function q(e,n){var t=Object(Z.a)(e,3),i=t[0],r=t[1],o=t[2];return[(-.9*i+r*r-o*o+8.91)*n,(i*(r-5*o)+1)*n,(i*(5*r+o)-o)*n]}var U;function B(e){var n=Object(s.useRef)(),t=Object(R.a)("/spaceship.gltf"),i=t.nodes,r=t.materials,o=Object(s.useRef)(0),u=Object(s.useMemo)((function(){return function(e,n){for(var t=[],i=n||S.a.onSphere(1),r=0;r<e;r++)t.push((new a.Vector3).fromArray(i));return[t,(new a.Vector3).fromArray(i)]}(30,[0,20,0])}),[]),l=Object(Z.a)(u,2),v=l[0],x=l[1];return Object(c.c)((function(){if(o.current){var e=function(e,n,t,i){var r=t(e.toArray(),i),o=Object(Z.a)(r,3),s=o[0],c=o[1],u=o[2];return e.add(new a.Vector3(s,c,u)),e.clone().normalize().multiplyScalar(n)}(x,20,q,.002);U&&(n.current.position.copy(U.clone().add(new a.Vector3(0,0,0))),n.current.lookAt(e),o.current.advance(U)),U=e}})),Object(w.jsxs)(w.Fragment,{children:[Object(w.jsxs)("group",Object(A.a)(Object(A.a)({ref:n,scale:[1,1,1]},e),{},{dispose:null,children:[Object(w.jsx)("mesh",{geometry:i.Cube005.geometry,material:r.Mat0}),Object(w.jsx)("mesh",{geometry:i.Cube005_1.geometry,material:r.Mat1}),Object(w.jsx)("mesh",{geometry:i.Cube005_2.geometry,material:r.Mat2}),Object(w.jsx)("mesh",{geometry:i.Cube005_3.geometry,material:r.Window_Frame}),Object(w.jsx)("mesh",{geometry:i.Cube005_4.geometry,material:r.Mat4}),Object(w.jsx)("mesh",{geometry:i.Cube005_5.geometry,material:r.Mat3}),Object(w.jsx)("mesh",{geometry:i.Cube005_6.geometry,material:r.Window})]})),Object(w.jsxs)("mesh",{children:[Object(w.jsx)("meshLine",{ref:o,attach:"geometry",points:v}),Object(w.jsx)("meshLineMaterial",{attach:"material",lineWidth:.25,color:"#FCEEB5",transparent:!0,opacity:.5})]})]})}R.a.preload("/spaceship.gltf");var G={malevolentIllusion:["#c06995","#de77c7","#df86df","#d998ee","#ceadf4","#c6bff9"],sunnyRainbow:["#fbe555","#fb9224","#f45905","#be8abf","#ffeed0","#feff89"]};function N(e){var n=e.mouse;return Object(w.jsxs)(w.Fragment,{children:[Object(w.jsx)(O.a,{makeDefault:!0,enablePan:!1,enableRotate:!1,enableZoom:!1}),Object(w.jsx)(M.a,{yawFrequency:.05,rollFrequency:.2,pitchFrequency:.1}),Object(w.jsx)("pointLight",{distance:100,intensity:4,color:"white"}),Object(w.jsxs)("group",{children:[Object(w.jsx)(B,{}),Object(w.jsx)(T,{distortionScale:100}),Object(w.jsx)(F,{count:5e3,mouse:n}),Object(w.jsx)(k,{count:20,mouse:n,colors:G.malevolentIllusion})]})]})}var E=function(e){e.iconFill,e.textFill;return Object(w.jsx)("svg",{xmlns:"http://www.w3.org/2000/svg",width:"360",height:"50",fill:"none",viewBox:"0 0 360 50",children:Object(w.jsx)("path",{style:{fill:"#E2BDFF"},d:"M83.75 38.35c-1.89 0-3.663-.35-5.32-1.05a13.532 13.532 0 01-4.305-3.01 14.445 14.445 0 01-2.87-4.48c-.7-1.703-1.05-3.535-1.05-5.495 0-1.937.338-3.745 1.015-5.425a14.126 14.126 0 012.905-4.48 13.532 13.532 0 014.305-3.01c1.633-.723 3.407-1.085 5.32-1.085 1.75 0 3.29.245 4.62.735 1.33.467 2.648 1.237 3.955 2.31.187.14.315.303.385.49a.826.826 0 01.105.525c0 .163-.035.327-.105.49-.023.35-.175.63-.455.84-.257.21-.572.327-.945.35-.35 0-.7-.128-1.05-.385-.887-.77-1.82-1.353-2.8-1.75-.98-.397-2.217-.595-3.71-.595a9.466 9.466 0 00-4.025.875 10.99 10.99 0 00-3.29 2.38 10.961 10.961 0 00-2.24 3.5 11.21 11.21 0 00-.805 4.235c0 1.54.268 2.975.805 4.305a11.5 11.5 0 002.24 3.5 10.491 10.491 0 003.29 2.345c1.26.56 2.602.84 4.025.84a10.21 10.21 0 003.5-.595 12.505 12.505 0 003.115-1.75c.373-.28.747-.397 1.12-.35.373.023.688.175.945.455.257.257.385.618.385 1.085 0 .21-.035.42-.105.63-.07.187-.198.362-.385.525a11.816 11.816 0 01-4.025 2.31c-1.447.49-2.963.735-4.55.735zm21.783-.21c-1.867 0-3.535-.408-5.005-1.225a9.303 9.303 0 01-3.43-3.43c-.817-1.47-1.225-3.15-1.225-5.04 0-1.913.408-3.593 1.225-5.04a8.971 8.971 0 013.43-3.43c1.47-.84 3.138-1.26 5.005-1.26s3.523.42 4.97 1.26a8.664 8.664 0 013.43 3.43c.84 1.447 1.272 3.127 1.295 5.04 0 1.89-.42 3.57-1.26 5.04a9.3 9.3 0 01-3.43 3.43c-1.447.817-3.115 1.225-5.005 1.225zm0-2.87c1.283 0 2.415-.292 3.395-.875a6.217 6.217 0 002.31-2.415c.56-1.027.84-2.205.84-3.535s-.28-2.508-.84-3.535c-.56-1.05-1.33-1.867-2.31-2.45-.98-.583-2.112-.875-3.395-.875-1.26 0-2.392.292-3.395.875-.98.583-1.75 1.4-2.31 2.45-.56 1.027-.84 2.205-.84 3.535s.28 2.508.84 3.535a6.216 6.216 0 002.31 2.415c1.003.583 2.135.875 3.395.875zm21.832 2.87c-1.54 0-2.998-.233-4.375-.7-1.376-.49-2.461-1.155-3.255-1.995-.303-.35-.431-.735-.385-1.155.047-.42.257-.782.63-1.085.397-.303.805-.432 1.225-.385.42.047.77.233 1.05.56.467.513 1.144.957 2.03 1.33.91.373 1.902.56 2.975.56 1.517 0 2.637-.245 3.36-.735.747-.513 1.132-1.143 1.155-1.89 0-.77-.361-1.412-1.085-1.925-.723-.537-1.995-.957-3.815-1.26-2.356-.443-4.071-1.132-5.145-2.065-1.073-.933-1.61-2.065-1.61-3.395 0-1.19.327-2.17.98-2.94.677-.793 1.552-1.377 2.625-1.75a10.11 10.11 0 013.465-.595c1.54 0 2.894.257 4.06.77 1.167.49 2.1 1.178 2.8 2.065.304.35.432.712.385 1.085-.023.373-.21.688-.56.945-.35.21-.758.28-1.225.21a1.891 1.891 0 01-1.12-.595c-.583-.607-1.236-1.027-1.96-1.26-.7-.257-1.516-.385-2.45-.385-1.12 0-2.053.21-2.8.63-.723.42-1.085.992-1.085 1.715 0 .467.117.875.35 1.225.257.35.724.677 1.4.98.677.28 1.645.537 2.905.77 1.75.327 3.127.758 4.13 1.295 1.027.537 1.762 1.167 2.205 1.89.444.723.665 1.54.665 2.45a4.932 4.932 0 01-.91 2.905c-.583.84-1.435 1.505-2.555 1.995-1.12.49-2.473.735-4.06.735zm37.486-.105c-.467 0-.852-.152-1.155-.455-.303-.303-.455-.688-.455-1.155V26.38c0-1.54-.397-2.718-1.19-3.535-.77-.817-1.773-1.225-3.01-1.225-1.307 0-2.38.455-3.22 1.365-.817.887-1.225 2.042-1.225 3.465h-2.73c.023-1.54.362-2.893 1.015-4.06a6.975 6.975 0 012.73-2.73c1.167-.653 2.485-.98 3.955-.98 1.353 0 2.543.303 3.57.91 1.05.607 1.867 1.493 2.45 2.66.583 1.143.875 2.52.875 4.13v10.045c0 .467-.152.852-.455 1.155-.28.303-.665.455-1.155.455zm-23.8 0c-.467 0-.852-.152-1.155-.455-.303-.303-.455-.688-.455-1.155V20.5c0-.49.152-.875.455-1.155.303-.303.688-.455 1.155-.455.49 0 .875.152 1.155.455.303.28.455.665.455 1.155v15.925c0 .467-.152.852-.455 1.155-.28.303-.665.455-1.155.455zm11.935 0c-.467 0-.852-.152-1.155-.455-.303-.303-.455-.688-.455-1.155V26.38c0-1.54-.397-2.718-1.19-3.535-.77-.817-1.773-1.225-3.01-1.225-1.307 0-2.392.443-3.255 1.33-.84.887-1.26 2.018-1.26 3.395h-2.1c.023-1.493.338-2.812.945-3.955.63-1.167 1.482-2.077 2.555-2.73 1.073-.653 2.287-.98 3.64-.98 1.353 0 2.543.303 3.57.91 1.05.607 1.867 1.493 2.45 2.66.583 1.143.875 2.52.875 4.13v10.045c0 .467-.152.852-.455 1.155-.28.303-.665.455-1.155.455zM178.55 38c-.373 0-.711-.117-1.015-.35-.28-.233-.49-.56-.63-.98l-7.07-23.695c-.21-.7-.198-1.26.035-1.68.257-.42.677-.63 1.26-.63.35 0 .665.105.945.315.304.187.525.502.665.945l6.23 21.805h-.77l5.845-21.455c.094-.327.28-.583.56-.77.304-.21.642-.315 1.015-.315.327 0 .642.093.945.28.327.163.525.432.595.805l5.88 21.455h-.735l6.3-21.98c.21-.723.747-1.085 1.61-1.085.584 0 .969.233 1.155.7.187.443.199.98.035 1.61l-7.07 23.66c-.14.42-.361.758-.665 1.015-.28.233-.606.35-.98.35a1.58 1.58 0 01-1.05-.385 2.115 2.115 0 01-.595-.945l-5.81-21.945h.84l-5.845 21.91c-.14.42-.361.758-.665 1.015-.28.233-.618.35-1.015.35zm30.98.14c-1.75 0-3.314-.42-4.69-1.26-1.377-.84-2.462-1.995-3.255-3.465-.794-1.47-1.19-3.127-1.19-4.97 0-1.867.42-3.523 1.26-4.97a9.485 9.485 0 013.465-3.465c1.47-.863 3.115-1.295 4.935-1.295 1.843 0 3.488.432 4.935 1.295a9.231 9.231 0 013.43 3.465c.863 1.47 1.306 3.127 1.33 4.97l-1.26.315c0 1.773-.397 3.372-1.19 4.795-.794 1.423-1.867 2.543-3.22 3.36-1.33.817-2.847 1.225-4.55 1.225zm.525-2.87c1.26 0 2.38-.292 3.36-.875a6.477 6.477 0 002.31-2.45c.583-1.05.875-2.217.875-3.5 0-1.307-.292-2.473-.875-3.5-.56-1.05-1.33-1.867-2.31-2.45-.98-.607-2.1-.91-3.36-.91-1.214 0-2.322.303-3.325.91a6.318 6.318 0 00-2.38 2.45c-.56 1.027-.84 2.193-.84 3.5 0 1.283.28 2.45.84 3.5a6.652 6.652 0 002.38 2.45c1.003.583 2.111.875 3.325.875zm8.05 2.765c-.467 0-.852-.152-1.155-.455-.304-.303-.455-.688-.455-1.155v-5.6l.665-3.36 2.59.98v7.98c0 .467-.164.852-.49 1.155-.304.303-.689.455-1.155.455zm23.197 0c-.467 0-.863-.152-1.19-.455a1.643 1.643 0 01-.455-1.155v-8.82c0-1.377-.257-2.497-.77-3.36-.513-.887-1.202-1.54-2.065-1.96-.863-.443-1.855-.665-2.975-.665-1.05 0-1.995.21-2.835.63-.84.42-1.517.98-2.03 1.68-.49.7-.735 1.505-.735 2.415h-2.1c.023-1.47.397-2.777 1.12-3.92a7.527 7.527 0 012.94-2.73c1.237-.677 2.625-1.015 4.165-1.015 1.633 0 3.092.35 4.375 1.05 1.283.677 2.298 1.68 3.045 3.01.747 1.33 1.12 2.952 1.12 4.865v8.82c0 .443-.163.828-.49 1.155a1.522 1.522 0 01-1.12.455zm-14.665 0c-.467 0-.852-.152-1.155-.455-.303-.303-.455-.688-.455-1.155v-15.96c0-.49.152-.875.455-1.155.303-.303.688-.455 1.155-.455.49 0 .875.152 1.155.455.303.28.455.665.455 1.155v15.96c0 .467-.152.852-.455 1.155-.28.303-.665.455-1.155.455zm30.859.105c-1.82 0-3.465-.42-4.935-1.26a9.762 9.762 0 01-3.465-3.5c-.84-1.47-1.26-3.127-1.26-4.97s.397-3.488 1.19-4.935c.793-1.47 1.878-2.625 3.255-3.465 1.377-.863 2.94-1.295 4.69-1.295 1.447 0 2.765.303 3.955.91 1.213.607 2.217 1.423 3.01 2.45v-9.8c0-.49.152-.875.455-1.155.303-.303.688-.455 1.155-.455.49 0 .887.152 1.19.455.303.28.455.665.455 1.155V28.48c-.023 1.82-.467 3.465-1.33 4.935a9.15 9.15 0 01-3.465 3.465c-1.447.84-3.08 1.26-4.9 1.26zm0-2.87c1.26 0 2.38-.292 3.36-.875a6.477 6.477 0 002.31-2.45c.583-1.05.875-2.228.875-3.535s-.292-2.473-.875-3.5a6.217 6.217 0 00-2.31-2.415c-.98-.607-2.1-.91-3.36-.91-1.213 0-2.322.303-3.325.91a6.393 6.393 0 00-2.38 2.415c-.56 1.027-.84 2.193-.84 3.5s.28 2.485.84 3.535a6.66 6.66 0 002.38 2.45c1.003.583 2.112.875 3.325.875zm24.888 2.87c-1.937 0-3.652-.408-5.145-1.225a9.226 9.226 0 01-3.465-3.43c-.84-1.47-1.26-3.15-1.26-5.04 0-1.913.396-3.593 1.19-5.04.793-1.47 1.89-2.613 3.29-3.43 1.4-.84 3.021-1.26 4.865-1.26 1.796 0 3.348.408 4.655 1.225 1.306.793 2.31 1.902 3.01 3.325.7 1.4 1.05 3.022 1.05 4.865 0 .397-.14.735-.42 1.015-.257.257-.607.385-1.05.385h-14.385v-2.59h14.42l-1.435 1.015c-.024-1.237-.269-2.345-.735-3.325-.467-.98-1.132-1.75-1.995-2.31-.864-.56-1.902-.84-3.115-.84-1.33 0-2.485.303-3.465.91a5.991 5.991 0 00-2.205 2.485c-.514 1.05-.77 2.24-.77 3.57 0 1.33.291 2.52.875 3.57a6.84 6.84 0 002.45 2.45c1.05.607 2.263.91 3.64.91.746 0 1.516-.14 2.31-.42.816-.28 1.458-.607 1.925-.98.326-.257.676-.385 1.05-.385.373-.023.7.082.98.315.35.327.536.688.56 1.085.023.373-.14.7-.49.98-.794.63-1.785 1.155-2.975 1.575-1.167.397-2.287.595-3.36.595zm14.215-12.04c.047-1.423.409-2.695 1.085-3.815a7.747 7.747 0 012.765-2.66c1.144-.653 2.404-.98 3.78-.98 1.284 0 2.24.198 2.87.595.654.397.899.898.735 1.505-.07.35-.21.607-.42.77a1.53 1.53 0 01-.735.245 6.46 6.46 0 01-.91-.07c-1.423-.233-2.695-.198-3.815.105s-2.006.828-2.66 1.575c-.653.747-.98 1.657-.98 2.73h-1.715zm.105 11.9c-.49 0-.875-.128-1.155-.385-.28-.28-.42-.677-.42-1.19V20.43c0-.49.14-.875.42-1.155.28-.28.665-.42 1.155-.42.537 0 .934.14 1.19.42.28.257.42.642.42 1.155v15.995c0 .49-.14.875-.42 1.155-.256.28-.653.42-1.19.42z"})})},W=function(){return Object(w.jsx)("svg",{stroke:"currentColor",fill:"currentColor",strokeWidth:"0",viewBox:"0 0 16 16",height:"2em",width:"2em",xmlns:"http://www.w3.org/2000/svg",children:Object(w.jsx)("path",{d:"M5.026 15c6.038 0 9.341-5.003 9.341-9.334 0-.14 0-.282-.006-.422A6.685 6.685 0 0 0 16 3.542a6.658 6.658 0 0 1-1.889.518 3.301 3.301 0 0 0 1.447-1.817 6.533 6.533 0 0 1-2.087.793A3.286 3.286 0 0 0 7.875 6.03a9.325 9.325 0 0 1-6.767-3.429 3.289 3.289 0 0 0 1.018 4.382A3.323 3.323 0 0 1 .64 6.575v.045a3.288 3.288 0 0 0 2.632 3.218 3.203 3.203 0 0 1-.865.115 3.23 3.23 0 0 1-.614-.057 3.283 3.283 0 0 0 3.067 2.277A6.588 6.588 0 0 1 .78 13.58a6.32 6.32 0 0 1-.78-.045A9.344 9.344 0 0 0 5.026 15z"})})},Y=function(){return Object(w.jsx)("svg",{stroke:"currentColor",fill:"currentColor",strokeWidth:"0",viewBox:"0 0 16 16",height:"2em",width:"2em",xmlns:"http://www.w3.org/2000/svg",children:Object(w.jsx)("path",{d:"M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8.287 5.906c-.778.324-2.334.994-4.666 2.01-.378.15-.577.298-.595.442-.03.243.275.339.69.47l.175.055c.408.133.958.288 1.243.294.26.006.549-.1.868-.32 2.179-1.471 3.304-2.214 3.374-2.23.05-.012.12-.026.166.016.047.041.042.12.037.141-.03.129-1.227 1.241-1.846 1.817-.193.18-.33.307-.358.336a8.154 8.154 0 0 1-.188.186c-.38.366-.664.64.015 1.088.327.216.589.393.85.571.284.194.568.387.936.629.093.06.183.125.27.187.331.236.63.448.997.414.214-.02.435-.22.547-.82.265-1.417.786-4.486.906-5.751a1.426 1.426 0 0 0-.013-.315.337.337 0 0 0-.114-.217.526.526 0 0 0-.31-.093c-.3.005-.763.166-2.984 1.09z"})})},X=function(){return Object(w.jsxs)("svg",{width:"219",height:"58",viewBox:"0 0 219 58",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[Object(w.jsx)("path",{d:"M21.1261 7.49689C5.56049 10.9932 5.62302 23.4496 3.57834 31.6511C1.01469 41.9143 6.2009 45.6826 18.4855 52.1119C32.8487 59.6276 42.3194 47.954 49.1051 26.7404C56.3106 4.21153 37.7451 3.76526 21.1261 7.49689ZM38.0229 27.4485C34.2956 39.1115 29.0875 45.5266 21.1914 41.3984C14.4382 37.8641 11.5887 35.7951 12.9989 30.1552C14.1224 25.6437 14.0864 18.8027 22.6458 16.8809C31.7813 14.833 41.9819 15.0734 38.0214 27.4556L38.0229 27.4485Z",fill:"#737373"}),Object(w.jsx)("path",{d:"M18.9502 29.5529C19.5177 27.2873 19.4997 23.8484 23.7977 22.8875C28.3881 21.8608 33.5103 21.9817 31.5215 28.1969C29.6494 34.0524 27.0304 37.2791 23.0661 35.2043C19.6726 33.4301 18.2458 32.3878 18.9502 29.5529Z",fill:"#737373"}),Object(w.jsx)("path",{d:"M71.3194 38.1849C70.9452 38.1849 70.6358 38.0621 70.3983 37.8165C70.1609 37.5708 70.0314 37.2674 70.0314 36.8917V24.1108C70.0314 23.7207 70.1537 23.4028 70.3983 23.1716C70.643 22.9404 70.9452 22.8175 71.3194 22.8175C71.6935 22.8175 72.0245 22.9331 72.2548 23.1716C72.485 23.4028 72.6074 23.7207 72.6074 24.1108V36.8917C72.6074 37.2674 72.4922 37.578 72.2548 37.8165C72.0245 38.0621 71.7079 38.1849 71.3194 38.1849ZM80.8606 38.1849C80.4865 38.1849 80.177 38.0621 79.9396 37.8165C79.6949 37.5708 79.5726 37.2674 79.5726 36.8917V28.8287C79.5726 27.5932 79.2632 26.6467 78.6372 25.9893C78.0112 25.3318 77.2053 25.0067 76.2195 25.0067C75.1762 25.0067 74.3127 25.3607 73.6291 26.076C72.9456 26.7912 72.6074 27.6944 72.6074 28.7998H70.9308C70.9524 27.6004 71.2042 26.5384 71.7007 25.6136C72.1972 24.6888 72.8736 23.9591 73.7299 23.4389C74.5861 22.9115 75.5575 22.6514 76.6369 22.6514C77.7162 22.6514 78.6732 22.897 79.5007 23.3811C80.3281 23.8652 80.9757 24.5732 81.4435 25.5052C81.9112 26.43 82.1414 27.5426 82.1414 28.8359V36.8989C82.1414 37.2746 82.0263 37.5853 81.7888 37.8237C81.5586 38.0693 81.242 38.1922 80.8534 38.1922L80.8606 38.1849ZM90.3443 38.1849C89.9701 38.1849 89.6607 38.0621 89.4233 37.8165C89.1786 37.5708 89.0563 37.2674 89.0563 36.8917V28.8287C89.0563 27.5932 88.7469 26.6467 88.1209 25.9893C87.4949 25.3318 86.689 25.0067 85.7032 25.0067C84.6598 25.0067 83.8036 25.3679 83.1416 26.0904C82.4796 26.8129 82.1486 27.7449 82.1486 28.8865H79.9684C79.99 27.651 80.2562 26.5673 80.7815 25.628C81.3067 24.6888 82.0335 23.9591 82.9617 23.4389C83.8971 22.9115 84.9477 22.6514 86.1205 22.6514C87.1999 22.6514 88.1569 22.897 88.9843 23.3811C89.8118 23.8652 90.4594 24.5732 90.9271 25.5052C91.3948 26.43 91.6251 27.5426 91.6251 28.8359V36.8989C91.6251 37.2746 91.51 37.5853 91.2725 37.8237C91.0423 38.0693 90.7257 38.1922 90.3371 38.1922L90.3443 38.1849Z",fill:"#737373"}),Object(w.jsx)("path",{d:"M102.872 38.3004C101.569 38.3004 100.404 38.0259 99.3746 37.4695C98.3457 36.9204 97.5398 36.104 96.9425 35.042C96.3453 33.9727 96.0503 32.6722 96.0503 31.1405V24.0601C96.0503 23.7061 96.1726 23.4026 96.4245 23.1498C96.6763 22.8969 96.9785 22.7741 97.3311 22.7741C97.7053 22.7741 98.0147 22.9041 98.2665 23.1498C98.5184 23.3954 98.6407 23.7061 98.6407 24.0601V31.1405C98.6407 32.2243 98.8421 33.1274 99.2595 33.8354C99.6696 34.5507 100.224 35.0781 100.922 35.4249C101.62 35.7717 102.411 35.9451 103.282 35.9451C104.152 35.9451 104.901 35.7789 105.563 35.4393C106.225 35.0998 106.757 34.6518 107.16 34.0738C107.563 33.5031 107.765 32.86 107.765 32.152H109.441C109.405 33.3152 109.103 34.3628 108.534 35.2948C107.966 36.2341 107.189 36.9638 106.196 37.4984C105.21 38.0331 104.095 38.3004 102.864 38.3004H102.872ZM109.053 38.1631C108.678 38.1631 108.369 38.0403 108.132 37.7947C107.887 37.549 107.765 37.2456 107.765 36.8699V24.0601C107.765 23.6844 107.887 23.3737 108.132 23.1353C108.376 22.8969 108.678 22.7668 109.053 22.7668C109.427 22.7668 109.736 22.8897 109.974 23.1353C110.218 23.381 110.341 23.6916 110.341 24.0601V36.8699C110.341 37.2456 110.218 37.5562 109.974 37.7947C109.729 38.0403 109.427 38.1631 109.053 38.1631Z",fill:"#737373"}),Object(w.jsx)("path",{d:"M122.336 38.2715C120.824 38.2715 119.486 37.9392 118.32 37.2745C117.155 36.6098 116.241 35.6922 115.579 34.5218C114.917 33.3514 114.586 32.0075 114.586 30.4903C114.586 28.9731 114.917 27.6003 115.579 26.4299C116.241 25.2595 117.155 24.3419 118.32 23.6772C119.486 23.0125 120.817 22.6802 122.307 22.6802C123.796 22.6802 125.12 23.0125 126.279 23.6772C127.437 24.3419 128.351 25.2595 129.02 26.4299C129.689 27.6003 130.035 28.9514 130.056 30.4903C130.056 32.0075 129.718 33.3514 129.049 34.5218C128.38 35.6922 127.466 36.6098 126.307 37.2745C125.149 37.9392 123.825 38.2715 122.336 38.2715ZM122.307 35.9668C123.328 35.9668 124.235 35.7356 125.019 35.266C125.804 34.7963 126.415 34.1533 126.869 33.3297C127.315 32.5061 127.538 31.5596 127.538 30.4903C127.538 29.421 127.315 28.4746 126.869 27.6365C126.423 26.8056 125.804 26.1554 125.019 25.6857C124.235 25.2161 123.328 24.9849 122.307 24.9849C121.285 24.9849 120.407 25.2161 119.623 25.6857C118.838 26.1554 118.22 26.8056 117.759 27.6365C117.306 28.4673 117.076 29.421 117.076 30.4903C117.076 31.5596 117.306 32.5061 117.759 33.3297C118.212 34.1533 118.838 34.7963 119.623 35.266C120.407 35.7356 121.299 35.9668 122.307 35.9668Z",fill:"#737373"}),Object(w.jsx)("path",{d:"M135.568 38.185C135.194 38.185 134.884 38.0622 134.647 37.8166C134.41 37.5709 134.287 37.2675 134.287 36.8918V24.0892C134.287 23.6991 134.41 23.3812 134.647 23.15C134.892 22.9188 135.194 22.796 135.568 22.796C135.957 22.796 136.273 22.9116 136.503 23.15C136.734 23.3812 136.856 23.6991 136.856 24.0892V36.899C136.856 37.2747 136.741 37.5854 136.503 37.8238C136.266 38.0622 135.957 38.1923 135.568 38.1923V38.185ZM147.29 38.185C146.915 38.185 146.606 38.055 146.354 37.8093C146.102 37.5565 145.973 37.253 145.973 36.899V29.8186C145.973 28.7132 145.764 27.8101 145.361 27.1092C144.951 26.4084 144.404 25.881 143.713 25.5342C143.023 25.1874 142.231 25.014 141.339 25.014C140.497 25.014 139.741 25.1802 139.072 25.5198C138.403 25.8593 137.863 26.3073 137.46 26.8708C137.058 27.4344 136.856 28.0774 136.856 28.8071H135.179C135.201 27.6294 135.496 26.5746 136.072 25.6498C136.647 24.725 137.432 23.9953 138.425 23.4607C139.418 22.926 140.526 22.6587 141.756 22.6587C143.059 22.6587 144.224 22.9332 145.253 23.4896C146.282 24.0386 147.088 24.8551 147.685 25.9171C148.282 26.9864 148.578 28.2869 148.578 29.8186V36.899C148.578 37.253 148.448 37.5565 148.196 37.8093C147.944 38.0622 147.642 38.185 147.29 38.185Z",fill:"#737373"}),Object(w.jsx)("path",{d:"M164.998 38.156C164.213 38.156 163.515 37.9393 162.897 37.513C162.278 37.0867 161.803 36.4871 161.458 35.7285C161.112 34.9698 160.939 34.0956 160.939 33.1058V17.4856C160.939 17.1099 161.055 16.8064 161.292 16.5752C161.522 16.344 161.832 16.2212 162.199 16.2212C162.587 16.2212 162.904 16.3368 163.134 16.5752C163.364 16.8064 163.487 17.1171 163.487 17.4856V33.0986C163.487 33.8283 163.623 34.428 163.904 34.8976C164.185 35.3672 164.544 35.5984 164.998 35.5984H165.696C166.048 35.5984 166.329 35.714 166.538 35.9524C166.746 36.1836 166.847 36.5015 166.847 36.8917C166.847 37.2818 166.696 37.5708 166.386 37.802C166.077 38.0332 165.681 38.156 165.199 38.156H165.005H164.998Z",fill:"#737373"}),Object(w.jsx)("path",{d:"M175.374 38.2715C173.992 38.2715 172.754 37.932 171.654 37.2456C170.553 36.5592 169.682 35.6344 169.034 34.464C168.394 33.2936 168.07 31.9714 168.07 30.4903C168.07 29.0092 168.408 27.6798 169.092 26.5022C169.776 25.3245 170.697 24.3925 171.862 23.7061C173.028 23.0197 174.337 22.6802 175.791 22.6802C177.244 22.6802 178.576 23.0197 179.734 23.7061C180.893 24.3925 181.806 25.3173 182.49 26.5022C183.174 27.687 183.519 29.0092 183.541 30.4903L182.533 30.7432C182.533 32.1665 182.224 33.4453 181.598 34.5796C180.972 35.7139 180.123 36.6098 179.036 37.2745C177.957 37.9392 176.734 38.2715 175.374 38.2715ZM175.791 35.9668C176.798 35.9668 177.691 35.7284 178.475 35.2515C179.259 34.7747 179.878 34.1172 180.331 33.2863C180.785 32.4555 181.015 31.5235 181.015 30.4903C181.015 29.4571 180.785 28.5035 180.331 27.6654C179.871 26.8345 179.252 26.177 178.475 25.7002C177.691 25.2233 176.806 24.9849 175.82 24.9849C174.834 24.9849 173.935 25.2233 173.136 25.7002C172.337 26.177 171.704 26.8273 171.251 27.6509C170.797 28.4746 170.567 29.421 170.567 30.4903C170.567 31.5596 170.797 32.4555 171.251 33.2863C171.704 34.1172 172.33 34.7747 173.121 35.2515C173.913 35.7284 174.805 35.9668 175.791 35.9668ZM182.224 38.1848C181.85 38.1848 181.54 38.062 181.303 37.8164C181.065 37.5707 180.943 37.2673 180.943 36.8916V32.3977L181.475 29.7028L183.548 30.4903V36.8916C183.548 37.2673 183.425 37.5779 183.181 37.8164C182.936 38.0548 182.62 38.1848 182.231 38.1848H182.224Z",fill:"#737373"}),Object(w.jsx)("path",{d:"M195.485 38.2716C194.032 38.2716 192.722 37.932 191.556 37.2601C190.391 36.5882 189.47 35.6562 188.8 34.4785C188.131 33.3009 187.786 31.9787 187.764 30.5193V17.5145C187.764 17.1243 187.887 16.8064 188.124 16.5752C188.369 16.344 188.671 16.2212 189.045 16.2212C189.434 16.2212 189.75 16.3368 189.981 16.5752C190.211 16.8064 190.333 17.1243 190.333 17.5145V25.3824C190.988 24.5587 191.787 23.9013 192.736 23.4172C193.686 22.9331 194.751 22.6875 195.924 22.6875C197.306 22.6875 198.543 23.0271 199.644 23.7134C200.745 24.3998 201.616 25.3246 202.256 26.495C202.896 27.6655 203.22 28.9876 203.22 30.4687C203.22 31.9498 202.882 33.2792 202.198 34.4569C201.515 35.6345 200.594 36.5665 199.428 37.2529C198.263 37.9393 196.946 38.2788 195.471 38.2788L195.485 38.2716ZM195.485 35.9669C196.471 35.9669 197.363 35.7284 198.155 35.2516C198.946 34.7748 199.572 34.1173 200.033 33.2864C200.486 32.4556 200.716 31.5091 200.716 30.4615C200.716 29.4139 200.486 28.4746 200.033 27.651C199.572 26.8274 198.953 26.1771 198.155 25.7003C197.363 25.2234 196.471 24.985 195.485 24.985C194.499 24.985 193.607 25.2234 192.816 25.7003C192.024 26.1771 191.405 26.8274 190.959 27.651C190.513 28.4746 190.29 29.4139 190.29 30.4615C190.29 31.5091 190.513 32.4483 190.959 33.2864C191.405 34.1173 192.024 34.7748 192.816 35.2516C193.607 35.7284 194.499 35.9669 195.485 35.9669Z",fill:"#737373"}),Object(w.jsx)("path",{d:"M212.97 38.2717C211.74 38.2717 210.574 38.0766 209.473 37.6937C208.372 37.3108 207.509 36.7833 206.868 36.1042C206.624 35.8224 206.523 35.5118 206.559 35.1794C206.595 34.8398 206.768 34.5508 207.063 34.3052C207.379 34.0596 207.703 33.9584 208.041 33.9945C208.379 34.0307 208.66 34.1824 208.883 34.4425C209.257 34.8543 209.804 35.2083 210.516 35.5118C211.236 35.8152 212.02 35.9597 212.884 35.9597C214.093 35.9597 214.992 35.7574 215.582 35.3528C216.172 34.9482 216.474 34.4497 216.489 33.85C216.489 33.2287 216.201 32.7157 215.618 32.2895C215.042 31.8704 214.021 31.5381 212.567 31.2924C210.682 30.9384 209.315 30.3821 208.459 29.6379C207.602 28.8865 207.171 27.9834 207.171 26.9141C207.171 25.9604 207.437 25.1657 207.969 24.5371C208.502 23.9086 209.2 23.4389 210.07 23.1355C210.941 22.832 211.855 22.6731 212.826 22.6731C214.057 22.6731 215.136 22.8754 216.071 23.28C217 23.6846 217.748 24.2409 218.309 24.9489C218.554 25.2307 218.662 25.5197 218.633 25.8232C218.604 26.1266 218.453 26.3722 218.173 26.5818C217.892 26.7479 217.575 26.8057 217.208 26.7479C216.841 26.6901 216.539 26.5312 216.302 26.2711C215.834 25.787 215.316 25.4402 214.747 25.2452C214.179 25.0501 213.524 24.9489 212.776 24.9489C211.884 24.9489 211.143 25.1151 210.552 25.4547C209.962 25.7943 209.675 26.2494 209.675 26.8274C209.675 27.2031 209.775 27.5282 209.97 27.81C210.164 28.0918 210.531 28.3519 211.078 28.5831C211.617 28.8143 212.395 29.031 213.402 29.2116C214.798 29.4717 215.906 29.8185 216.719 30.252C217.532 30.6855 218.115 31.1913 218.468 31.7693C218.82 32.3472 219 33.0047 219 33.7344C219 34.5942 218.763 35.3673 218.288 36.0536C217.813 36.74 217.129 37.2746 216.23 37.672C215.337 38.0622 214.251 38.2645 212.985 38.2645L212.97 38.2717Z",fill:"#737373"}),Object(w.jsx)("path",{d:"M97.3315 44.2684C96.9573 44.2684 96.6479 44.1455 96.4104 43.8999C96.1658 43.6542 96.0435 43.3508 96.0435 42.9751V30.1653C96.0435 29.7896 96.1658 29.479 96.4104 29.2405C96.6551 29.0021 96.9573 28.8721 97.3315 28.8721C97.7056 28.8721 98.015 28.9949 98.2525 29.2405C98.4971 29.4862 98.6194 29.7969 98.6194 30.1653V42.9751C98.6194 43.3508 98.4971 43.6615 98.2525 43.8999C98.0078 44.1455 97.7056 44.2684 97.3315 44.2684Z",fill:"#737373"})]})},H=function(){return Object(w.jsx)("div",{className:"spinner-wrapper",children:Object(w.jsx)("div",{className:"spinner"})})};function J(){var e=Object(s.useRef)([0,0]),n=Object(s.useCallback)((function(n){var t=n.clientX,i=n.clientY;return e.current=[t-window.innerWidth/2,i-window.innerHeight/2]}),[]);return Object(w.jsx)("div",{onMouseMove:n,style:{width:"100vw",height:"100vh"},children:Object(w.jsxs)(s.Suspense,{fallback:Object(w.jsx)(H,{}),children:[Object(w.jsxs)(c.a,{pixelRatio:window.devicePixelRatio,camera:{fov:100,position:[0,0,30]},onCreated:function(e){var n=e.gl,t=e.size,i=e.camera;t.width<600&&(i.position.z=45),n.setClearColor(new a.Color("#020207"))},children:[Object(w.jsx)(N,{mouse:e}),Object(w.jsx)(z,{})]}),Object(w.jsx)("div",{className:"overlay",children:Object(w.jsxs)("div",{children:[Object(w.jsx)(E,{}),Object(w.jsx)("div",{className:"soon",children:"Coming Soon"})]})}),Object(w.jsxs)("div",{className:"attribution",children:[Object(w.jsx)(X,{}),Object(w.jsxs)("div",{className:"social",children:[Object(w.jsx)("a",{target:"_blank",href:"https://twitter.com/cosmwander",children:Object(w.jsx)(W,{})})," "," ",Object(w.jsx)("a",{target:"_blank",href:"https://github.com/muon-labs/",children:Object(w.jsx)(Y,{})})]})]})]})})}Object(c.b)(i),o.a.render(Object(w.jsx)(J,{}),document.getElementById("root"))}},[[55,1,2]]]);
//# sourceMappingURL=main.d4939264.chunk.js.map